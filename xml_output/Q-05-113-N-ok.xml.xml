<sequence_node size='3'>
  <declaration_node name='r' qualifier='private' type='double'>
  <initializer>
      <double_node>61</double_node>
  </initializer>
  </declaration_node>
  <declaration_node name='main' qualifier='public' type='var'>
  <initializer>
      <function_definition_node return type='double'>
        <arguments>
          <sequence_node size='1'>
            <declaration_node name='p' qualifier='private' type='pointer to double'>
            </declaration_node>
          </sequence_node>
        </arguments>
        <block_node>
          <declarations>
          </declarations>
          <instructions>
            <sequence_node size='1'>
              <return_node>
                  <rvalue_node>
                      <index_node>
                      <base>
                        <rvalue_node>
                            <variable_node>p</variable_node>
                        </rvalue_node>
                      </base>
                      <index>
                        <integer_node>0</integer_node>
                      </index>
                      </index_node>
                  </rvalue_node>
              </return_node>
            </sequence_node>
          </instructions>
        </block_node>
      </function_definition_node>
  </initializer>
  </declaration_node>
  <program_node>
      <block_node>
        <declarations>
        </declarations>
        <instructions>
          <sequence_node size='2'>
            <write_node>
              <sequence_node size='1'>
                <function_call_node>
                  <function pointer>
                    <rvalue_node>
                        <variable_node>main</variable_node>
                    </rvalue_node>
                  </function pointer>
                  <arguments>
                    <sequence_node size='1'>
                      <address_of_node>
                        <variable_node>r</variable_node>
                      </address_of_node>
                    </sequence_node>
                  </arguments>
                </function_call_node>
              </sequence_node>
            </write_node>
            <return_node>
                <integer_node>0</integer_node>
            </return_node>
          </sequence_node>
        </instructions>
      </block_node>
  </program_node>
</sequence_node>
