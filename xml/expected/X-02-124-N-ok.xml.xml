<sequence_node size='3'>
  <declaration_node name='f' qualifier='private' type='function with output double and inputs (integer)'>
    <initializer>
      <function_definition_node return_type='double'>
        <arguments>
          <sequence_node size='1'>
            <declaration_node name='i' qualifier='private' type='integer'>
            </declaration_node>
          </sequence_node>
        </arguments>
        <block_node>
          <declarations>
          </declarations>
          <instructions>
            <sequence_node size='1'>
              <return_node>
                  <add_node>
                    <rvalue_node>
                      <variable_node>i</variable_node>
                    </rvalue_node>
                    <double_node>1.1</double_node>
                  </add_node>
              </return_node>
            </sequence_node>
          </instructions>
        </block_node>
      </function_definition_node>
    </initializer>
  </declaration_node>
  <declaration_node name='g' qualifier='private' type='function with output double and inputs (function with output double and inputs (integer),integer)'>
    <initializer>
      <function_definition_node return_type='double'>
        <arguments>
          <sequence_node size='2'>
            <declaration_node name='f' qualifier='private' type='function with output double and inputs (integer)'>
            </declaration_node>
            <declaration_node name='i' qualifier='private' type='integer'>
            </declaration_node>
          </sequence_node>
        </arguments>
        <block_node>
          <declarations>
          </declarations>
          <instructions>
            <sequence_node size='1'>
              <return_node>
                  <function_call_node>
                    <function pointer>
                      <rvalue_node>
                        <variable_node>f</variable_node>
                      </rvalue_node>
                    </function pointer>
                    <arguments>
                      <sequence_node size='1'>
                        <rvalue_node>
                          <variable_node>i</variable_node>
                        </rvalue_node>
                      </sequence_node>
                    </arguments>
                  </function_call_node>
              </return_node>
            </sequence_node>
          </instructions>
        </block_node>
      </function_definition_node>
    </initializer>
  </declaration_node>
  <program_node>
    <block_node>
      <declarations>
        <sequence_node size='1'>
          <declaration_node name='ff' qualifier='private' type='function with output double and inputs (integer)'>
            <initializer>
              <function_definition_node return_type='integer'>
                <arguments>
                  <sequence_node size='1'>
                    <declaration_node name='d' qualifier='private' type='double'>
                    </declaration_node>
                  </sequence_node>
                </arguments>
                <block_node>
                  <declarations>
                  </declarations>
                  <instructions>
                    <sequence_node size='1'>
                      <return_node>
                          <integer_node>2</integer_node>
                      </return_node>
                    </sequence_node>
                  </instructions>
                </block_node>
              </function_definition_node>
            </initializer>
          </declaration_node>
        </sequence_node>
      </declarations>
      <instructions>
        <sequence_node size='6'>
          <write_node newline='true'>
            <sequence_node size='1'>
              <function_call_node>
                <function pointer>
                  <rvalue_node>
                    <variable_node>f</variable_node>
                  </rvalue_node>
                </function pointer>
                <arguments>
                  <sequence_node size='1'>
                    <integer_node>0</integer_node>
                  </sequence_node>
                </arguments>
              </function_call_node>
            </sequence_node>
          </write_node>
          <evaluation_node>
            <assignment_node>
                <variable_node>f</variable_node>
                <function_definition_node return_type='integer'>
                  <arguments>
                    <sequence_node size='1'>
                      <declaration_node name='d' qualifier='private' type='double'>
                      </declaration_node>
                    </sequence_node>
                  </arguments>
                  <block_node>
                    <declarations>
                    </declarations>
                    <instructions>
                      <sequence_node size='1'>
                        <return_node>
                            <neg_node>
                              <integer_node>1</integer_node>
                            </neg_node>
                        </return_node>
                      </sequence_node>
                    </instructions>
                  </block_node>
                </function_definition_node>
            </assignment_node>
          </evaluation_node>
          <write_node newline='true'>
            <sequence_node size='1'>
              <function_call_node>
                <function pointer>
                  <rvalue_node>
                    <variable_node>f</variable_node>
                  </rvalue_node>
                </function pointer>
                <arguments>
                  <sequence_node size='1'>
                    <integer_node>0</integer_node>
                  </sequence_node>
                </arguments>
              </function_call_node>
            </sequence_node>
          </write_node>
          <write_node newline='true'>
            <sequence_node size='1'>
              <function_call_node>
                <function pointer>
                  <rvalue_node>
                    <variable_node>ff</variable_node>
                  </rvalue_node>
                </function pointer>
                <arguments>
                  <sequence_node size='1'>
                    <integer_node>0</integer_node>
                  </sequence_node>
                </arguments>
              </function_call_node>
            </sequence_node>
          </write_node>
          <write_node newline='true'>
            <sequence_node size='1'>
              <function_call_node>
                <function pointer>
                  <rvalue_node>
                    <variable_node>g</variable_node>
                  </rvalue_node>
                </function pointer>
                <arguments>
                  <sequence_node size='2'>
                    <function_definition_node return_type='integer'>
                      <arguments>
                        <sequence_node size='1'>
                          <declaration_node name='d' qualifier='private' type='double'>
                          </declaration_node>
                        </sequence_node>
                      </arguments>
                      <block_node>
                        <declarations>
                        </declarations>
                        <instructions>
                          <sequence_node size='1'>
                            <return_node>
                                <neg_node>
                                  <integer_node>2</integer_node>
                                </neg_node>
                            </return_node>
                          </sequence_node>
                        </instructions>
                      </block_node>
                    </function_definition_node>
                    <integer_node>0</integer_node>
                  </sequence_node>
                </arguments>
              </function_call_node>
            </sequence_node>
          </write_node>
          <return_node>
              <integer_node>0</integer_node>
          </return_node>
        </sequence_node>
      </instructions>
    </block_node>
  </program_node>
</sequence_node>
